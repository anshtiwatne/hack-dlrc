from random import randint, random
import json


def generate_problem() -> str:
    ds = "0123456789ABCDEF"
    out = ""
    for _ in range(256):
        l = randint(8, 12)
        b = randint(1, 16)
        s = "+" if random() > 0.30 else "-"  # 70% chance it is a +

        n = ""
        if b == 1:  # base 1 edge case
            n = "".join([ds[1] for _ in range(l)])
        else:
            n = "".join([ds[randint(0, b - 1)] for _ in range(l)])  # yeah, fight me
        out += f"{s} {b} {n}\n"
    return out


def solve(inp: str) -> int:
    out = 0
    for l in inp.splitlines():
        s, b, m = l.split()
        b = int(b)

        out += (int(m, b) if b > 1 else len(m)) * (1 if s == "+" else -1)
    return out


print(
    solve(
        """+ 5 34231444121
+ 2 10110111
+ 4 2212132333
+ 13 057673447
+ 11 890064617
- 12 A40A0B685429
+ 2 01000000
+ 14 945DC3BD242
+ 3 1221010111
+ 5 14320040
- 9 068717622777
+ 3 02222000000
+ 15 2EDA4198DC
+ 16 BAF3ADC6A9
+ 10 39304338
+ 11 1796651805A5
+ 2 0011001000
+ 3 22210001110
+ 6 523552350115
+ 7 4333433060
- 7 65510335054
+ 8 723135232
- 7 23140155
+ 9 4755344142
- 13 4283266116B9
+ 12 3232B54B18
- 3 1202202021
+ 13 C67B4240C0
+ 5 32303300121
- 11 409110A8A46
- 16 C6EB23F0B5F1
+ 2 0111101010
- 6 24225155
+ 1 111111111111
+ 8 03703206700
+ 12 51A36888
- 8 31372056
+ 4 221002202
+ 10 180569993
+ 12 5B452840A
+ 9 402541673
- 5 00212343144
+ 14 0A88B3073
+ 11 21A42580719
- 4 213233023
+ 10 489744374427
+ 9 805611408
+ 5 023321112314
+ 10 24501782
+ 16 703DCC300E29
- 1 11111111111
- 3 22011011
- 13 303276779
+ 10 09151165
+ 15 41251A6C
- 3 112200022120
+ 4 32101320211
+ 13 35439453606
- 3 00120100
+ 2 101011011
+ 7 1331500220
+ 9 53441804
+ 2 00000101
+ 6 310545403142
- 4 10123002222
+ 10 291432754
- 5 0422133222
+ 16 48FE15CC25D
+ 3 00121220
+ 7 26540666150
+ 4 332211012100
+ 4 221121100312
+ 10 70357096
+ 4 123330233
- 7 062403353
+ 4 113313022031
+ 12 416A255340
+ 7 54042346
+ 6 413203230220
- 11 23108055A831
+ 12 750797305
+ 5 4333224133
+ 8 076475626140
- 9 75880335
+ 1 11111111111
- 3 022000001112
+ 9 083443267
+ 12 282082B9829
- 5 2440312114
+ 2 11110001110
- 2 10111000
+ 1 11111111
+ 11 15859957078
+ 5 140140201100
+ 6 232433523
+ 8 44720737140
- 10 8255659286
+ 8 757475653
+ 13 454759B5677
+ 14 BD8571B7
- 3 200021022
- 3 120102211
- 9 776265631
+ 4 3023212330
+ 2 11001010001
+ 4 1310231131
+ 7 12406646603
+ 13 BB7A5307C
+ 7 34564336254
+ 14 AD0D641CCAC
+ 5 013331122
+ 3 22201022021
+ 12 9248B4389B36
- 6 413210054
+ 5 242113233
+ 5 13332201113
+ 11 04857852
- 7 3212326564
+ 11 794809301
+ 15 A4069D543
- 3 22212001
+ 12 A7796940
+ 10 52146529679
+ 14 4D005450B938
- 14 C00283A742
+ 10 193535026
- 12 6B2AB174155
- 10 80030762050
- 3 211021212
+ 11 7315516A2
- 15 2247B583A3A7
- 5 0300100320
- 7 055131665636
- 2 01010000
+ 2 001011101
+ 1 11111111111
+ 5 1214430420
+ 1 11111111111
- 13 685278B1197
+ 8 3536322136
- 13 6357B8B177
- 11 A49646A920
+ 16 FCC8E17F801
- 5 03120403
- 16 E8118768
+ 15 4D443114
+ 11 5862107808
- 1 111111111
- 2 000010101001
+ 8 7177152041
- 4 22133111
- 6 5035010241
- 2 011001101000
+ 1 11111111
+ 16 CCD911C0
+ 13 00589149B
+ 13 0B50700877
- 10 674540289
+ 1 11111111111
+ 1 11111111
+ 12 21A309B92
- 10 00050324
- 4 313223230
+ 12 4B6315182633
- 12 311A1156
- 7 445101364
- 3 2012012022
+ 9 273570075
- 3 021112112
+ 9 8756423506
+ 7 32302116
+ 4 322211032210
+ 12 62B4572288
+ 10 486392237
+ 14 1DA90808
+ 8 0367643006
- 3 122101112012
+ 5 00232331442
+ 8 0170435716
+ 3 12000010
- 14 5327337A
+ 13 5C45710013
+ 2 11010111
+ 3 00010112
+ 15 21474E89A9
+ 9 0163685840
+ 3 00102211
+ 11 5326753A141
+ 8 624335614003
+ 5 0441421414
+ 6 2014234523
+ 4 20212030331
- 13 074C3A123
- 10 34956402621
+ 1 1111111111
- 6 54420155014
+ 3 2202022001
+ 14 D4359603CB21
+ 13 1223AC10
+ 11 72153AA7841
+ 8 3540411163
+ 7 52106064
+ 10 204955070303
- 7 32062121026
- 10 780067446
+ 13 A8523A81
+ 10 0716527736
- 16 DA9137774
+ 12 9B711900314
+ 4 213020132123
- 7 225646165
- 6 0135340500
+ 6 153032331
+ 10 115771658
+ 9 445128388371
+ 7 360264124
- 9 77258540
+ 12 17060259100
+ 14 7A4739C61
- 15 535B1577A17
+ 10 08408171914
+ 4 33312103013
+ 9 044283507
+ 16 73A62E9D10
+ 6 53332150
+ 8 4055642220
- 16 63F5C1C17
+ 11 0A37A784
+ 11 0A6532A02A11
+ 13 07BC6474365
+ 1 1111111111
+ 2 11011101001
- 13 9B1717BC730
+ 12 468AB2B0934
+ 16 55B670006B
+ 4 31030003103
+ 16 94A1FDD16E3
- 15 179D52E9
- 2 01001000000
- 3 001021211111
- 11 AA70065582
+ 15 8A072406C32
- 2 110100011
- 7 0332405426
- 8 216442645
+ 7 32351401
+ 9 446258747864
- 4 200010103
- 1 1111111111
+ 14 4C0235271
+ 14 48B2D4056417
+ 2 01001111100
+ 3 012012111102
+ 3 12011120
- 12 B92080040462
- 11 690852848A93"""
    )
)
# if __name__ == "__main__":
#     p = generate_problem()
#     s = solve(p)
#     print(p)
#     print(s)
